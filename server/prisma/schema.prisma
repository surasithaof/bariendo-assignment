// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  salt  String
  password String
  isSuperAdmin Boolean @default(false) @map("is_super_admin")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  usersOrganization UserOrganization[]

   @@map("users")
}

model UserOrganization {
  id Int @default(autoincrement()) @id
  userId Int @map("user_id")
  user User @relation(fields: [userId], references: [id])
  organizationId Int @map("organization_id")
  organization Organization @relation(fields: [organizationId], references: [id])
  role  Role    @default(Patient)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
  patient Patient? 
  doctor Doctor?

  @@map("user_organizations")
}

enum Role {
  Patient
  Doctor
  Admin
  SuperAdmin
}

model Patient {
  id Int @default(autoincrement()) @id
  userOrganizationId Int @map("user_organization_id") @unique
  userOrganization UserOrganization @relation(fields: [userOrganizationId], references: [id]) 
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  appointments Appointments[]

   @@map("patients")
}

model Doctor {
  id Int @default(autoincrement()) @id
  userOrganizationId Int @map("user_organization_id") @unique
  userOrganization UserOrganization @relation(fields: [userOrganizationId], references: [id]) 
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  appointments Appointments[]

   @@map("doctors")
}

model Organization {
  id Int @default(autoincrement()) @id
  name String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  usersOrganization UserOrganization[]
  appointments Appointments[]

   @@map("organizations")
}

model Appointments {
  id Int @default(autoincrement()) @id
  date DateTime
  patientId Int @map("patient_id")
  patient Patient @relation(fields: [patientId], references: [id])
  doctorId Int @map("doctor_id")
  doctor Doctor @relation(fields: [doctorId], references: [id])
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  organizationId Int @map("organization_id")
  organization Organization @relation(fields: [organizationId], references: [id])

   @@map("appointments")
}